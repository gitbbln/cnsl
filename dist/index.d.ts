import { TColors, TFlags, TColorSchema, TNumber } from './index.d';
export declare class Cnsl {
    u001b: string;
    endEsc: string;
    boldEsc: string;
    reversedEsc: string;
    underlineEsc: string;
    foreGroundColor256: string;
    backGroundColor256: string;
    colors_arr: string[];
    fg: TColors;
    bg: TColors;
    atr: TColors;
    colorSchema: TColorSchema;
    ESC: string;
    m: string;
    reset: number;
    open: string;
    close: string;
    comma: string;
    ifBright(b: boolean, color: number): number;
    log_raw(...args: any[]): void;
    fillColors(v: TColors): void;
    fillAttrs(v: TColors): void;
    exx(fn: string, data: string, flags: TFlags, b: boolean): void;
    d2: (num?: number) => string;
    d8: (num?: number) => string;
    d6: (num?: number) => string;
    d4: (num?: number) => string;
    nextLine: (num?: number) => string;
    previousLine: (num?: number) => string;
    horizontalAbsolute: (num?: number) => string;
    eraseData: () => string;
    eraseLine: () => TColors;
    goto: (x: number, y: number) => string;
    gotoSOL: () => string;
    beep: () => string;
    hideCursor: () => string;
    showCursor: () => string;
    cursor: (x: number, y: number) => void;
    colorNodeRenderer: (fg: TColors) => TColors;
    msg: (fn: string, arr: string[], colors: string | undefined) => string;
    log: (colors: string, ...args: any[]) => void;
    lof: (f: string, colors: string, ...args: any[]) => void;
    loc: (f: string, x: number, y: number, colors: string, ...args: any[]) => void;
    ao: (arr: string[], value?: number) => TNumber;
    constructor();
}
